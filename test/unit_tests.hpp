#ifndef BEZIER_UNIT_TESTS_HPP
#define BEZIER_UNIT_TESTS_HPP

#include <Eigen/Dense>

#include "Bezier/declarations.h"

namespace Bezier
{
static Eigen::MatrixX2d getCurvePointsAsEigenMatrix()
{
  Eigen::MatrixX2d curve_pts;
  curve_pts.resize(4, 2);
  curve_pts << 84, 162, 246, 30, 48, 236, 180, 110;
  return curve_pts;
}

static Eigen::MatrixX2d getRootsCurvePointsAsEigenMatrix()
{
  Eigen::MatrixX2d curve_pts;
  curve_pts.resize(4, 2);
  curve_pts << -50, -50, 75, 48, 64, 65, 50, -50;
  return curve_pts;
}

static Eigen::MatrixX2d getIntersectionCurvePointsAsEigenMatrix()
{
  Eigen::MatrixX2d curve_pts;
  curve_pts.resize(5, 2);
  curve_pts << 180, 110, 175, 160, 60, 48, 164, 165, 124, 134;
  return curve_pts;
}

static PointVector getCurvePointsAsPointVector()
{
  PointVector curve_pts{{84, 162}, {246, 30}, {48, 236}, {180, 110}};
  return curve_pts;
}

static PointVector getExpectedPolylinePoints()
{
  // clang-format off
  return { {84, 162}, {129.223, 127.035}, {148.781, 115.906}, {151.463, 116.827}, {150.762, 120.762}, {143.25, 133.75}, {134.332, 147.02}, {132.094, 152.719}, {144.621, 142.996}, {180, 110}, {84, 162}, {91.3327, 156.058}, {98.1539, 150.595}, {104.479, 145.597}, {110.325, 141.047}, {115.706, 136.932}, {120.639, 133.235}, {125.139, 129.941}, {129.223, 127.035}, {132.905, 124.502}, {134.601, 123.37}, {136.202, 122.325}, {137.712, 121.366}, {139.13, 120.49}, {140.461, 119.696}, {141.705, 118.982}, {142.864, 118.345}, {143.941, 117.785}, {144.937, 117.298}, {145.855, 116.883}, {146.697, 116.539}, {147.464, 116.262}, {148.158, 116.052}, {148.781, 115.906}, {149.336, 115.823}, {149.824, 115.8}, {150.248, 115.836}, {150.608, 115.928}, {150.908, 116.076}, {151.15, 116.276}, {151.334, 116.527}, {151.463, 116.827}, {151.54, 117.174}, {151.566, 117.566}, {151.543, 118.002}, {151.472, 118.479}, {151.357, 118.995}, {151.199, 119.549}, {151, 120.139}, {150.762, 120.762}, {150.486, 121.417}, {150.176, 122.102}, {149.458, 123.553}, {148.623, 125.101}, {147.687, 126.73}, {146.666, 128.425}, {145.576, 130.17}, {144.432, 131.95}, {143.25, 133.75}, {140.836, 137.348}, {138.461, 140.84}, {136.251, 144.105}, {134.332, 147.02}, {133.521, 148.307}, {132.83, 149.461}, {132.276, 150.466}, {131.873, 151.306}, {131.733, 151.66}, {131.637, 151.967}, {131.587, 152.225}, {131.585, 152.433}, {131.633, 152.588}, {131.732, 152.689}, {131.885, 152.733}, {132.094, 152.719}, {132.36, 152.644}, {132.686, 152.508}, {133.074, 152.307}, {133.525, 152.041}, {134.042, 151.706}, {134.627, 151.302}, {136.006, 150.276}, {137.68, 148.948}, {139.663, 147.302}, {141.971, 145.323}, {144.621, 142.996}, {147.628, 140.305}, {151.008, 137.236}, {154.776, 133.772}, {158.949, 129.898}, {163.542, 125.599}, {168.571, 120.86}, {180, 110} }; // clang-format on
}

static Eigen::MatrixX2d getExpectedValueAt()
{
  Eigen::MatrixX2d mat;
  mat.resize(5, 2);
  mat << 83.99999999999998579, 161.99999999999997158, 148.78124999999997158, 115.90625000000000000,
      143.24999999999994316, 133.75000000000000000, 132.09374999999994316, 152.71875000000005684, 180.00000000000002842,
      109.99999999999997158;
  return mat;
}

} // namespace Bezier

#endif // BEZIER_UNIT_TESTS_HPP
